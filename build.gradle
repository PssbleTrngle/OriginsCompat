buildscript {
    repositories {
        maven { url = 'https://maven.minecraftforge.net' }
        maven { url = 'https://repo.spongepowered.org/repository/maven-public' }
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
        classpath "org.spongepowered:mixingradle:0.7-SNAPSHOT"
    }
}

plugins {
    id 'com.matthewprenger.cursegradle' version '1.4.0'
    id "com.modrinth.minotaur" version "2.+"
}

apply plugin: 'java'
apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'eclipse'
apply plugin: 'maven-publish'

apply plugin: 'org.spongepowered.mixin'

mixin {
    add sourceSets.main, "${project.mod_id}.refmap.json"
}

archivesBaseName = mod_id

java.toolchain.languageVersion = JavaLanguageVersion.of(17)
java.withSourcesJar()
java.withJavadocJar()

minecraft {
    mappings channel: 'official', version: minecraft_version

    if (project.hasProperty('forge_ats_enabled') && project.findProperty('forge_ats_enabled').toBoolean()) {
        // This location is hardcoded in Forge and can not be changed.
        // https://github.com/MinecraftForge/MinecraftForge/blob/be1698bb1554f9c8fa2f58e32b9ab70bc4385e60/fmlloader/src/main/java/net/minecraftforge/fml/loading/moddiscovery/ModFile.java#L123
        accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')
        project.logger.debug('Forge Access Transformers are enabled for this project.')
    }

    runs {
        client {
            workingDirectory project.file('run')
            ideaModule "${rootProject.name}.${project.name}.main"
            taskName 'Client'

            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            arg "-mixin.config=${project.mod_id}.mixins.json"

            mods {
                modClientRun {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')
            ideaModule "${rootProject.name}.${project.name}.main"
            taskName 'Server'

            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            arg "-mixin.config=${mod_id}.mixins.json"

            mods {
                modServerRun {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')
            ideaModule "${rootProject.name}.${project.name}.main"
            args '--mod', mod_id, '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
            taskName 'Data'

            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            arg "-mixin.config=${mod_id}.mixins.json"

            mods {
                modDataRun {
                    source sourceSets.main
                }
            }
        }
    }
}

sourceSets.main.resources.srcDir 'src/generated/resources'

repositories {
    mavenCentral()

    maven {
        name = 'Sponge / Mixin'
        url = 'https://repo.spongepowered.org/repository/maven-public/'
    }

    maven {
        url 'https://maven.tterrag.com/'
        content {
            includeGroup "com.simibubi.create"
            includeGroup "com.jozufozu.flywheel"
            includeGroup "com.tterrag.registrate"
        }
    }
    maven {
        url "https://maven.theillusivec4.top"
        content {
            includeGroup "top.theillusivec4.caelus"
        }
    }

    maven {
        url 'https://jitpack.io'
        content {
            includeGroup "com.github.Virtuoel"
        }
    }

    maven {
        url "https://cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }
}

dependencies {
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"

    implementation fg.deobf("top.theillusivec4.caelus:caelus-forge:${caelus_version}")
    implementation fg.deobf("curse.maven:origins-474438:${origins_version}")

    implementation fg.deobf("com.github.Virtuoel:Pehkui:${pehkui_version}-${minecraft_version}-forge")

    //implementation fg.deobf("com.github.apace100:apoli:${apoli_version}") {
    //    exclude group: "com.terraformersmc"
    //}

    implementation fg.deobf("com.simibubi.create:create-${minecraft_version}:${create_version}:slim") { transitive = false }
    implementation fg.deobf("com.jozufozu.flywheel:flywheel-forge-${minecraft_version}:${flywheel_version}")
    implementation fg.deobf("com.tterrag.registrate:Registrate:${registrate_version}")

    annotationProcessor "org.spongepowered:mixin:0.8.5:processor"
}

jar {
    from(rootProject.file("LICENSE")) {
        rename { "${it}_${mod_name}" }
    }
    manifest {
        attributes([
                'Specification-Title'     : mod_name,
                'Specification-Vendor'    : mod_author,
                'Specification-Version'   : project.jar.archiveVersion,
                'Implementation-Title'    : project.name,
                'Implementation-Version'  : project.jar.archiveVersion,
                'Implementation-Vendor'   : mod_author,
                'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                'Timestampe'              : System.currentTimeMillis(),
                'Built-On-Java'           : "${System.getProperty('java.vm.version')} (${System.getProperty('java.vm.vendor')})",
                'Build-On-Minecraft'      : minecraft_version,
                "MixinConfigs"            : "${project.mod_id}.mixins.json",
        ])
    }
}

sourcesJar {
    from(rootProject.file("LICENSE")) {
        rename { "${it}_${mod_name}" }
    }
}

//jar.finalizedBy('reobfJar')


def ENV = System.getenv()

curseforge {
    apiKey = ENV.CURSEFORGE_TOKEN
    project {
        id = project.curseforge_project_id
        addGameVersion project.minecraft_version
        addGameVersion 'Forge'
        changelog = ENV.CHANGELOG
        changelogType = 'markdown'
        releaseType = project.release_type
        mainArtifact(jar) {
            displayName = "Version ${project.version}"
        }
        relations {
            requiredDependency 'origins-forge'
            optionalDependency 'create'
            optionalDependency 'pehkui'
        }
    }
}

modrinth {
    token = ENV.MODRINTH_TOKEN
    projectId = project.modrinth_project_id
    versionNumber = version
    versionName = "Version ${project.version}"
    changelog = ENV.CHANGELOG
    gameVersions = [project.minecraft_version]
    loaders = ["forge"]
    versionType = project.release_type
    uploadFile = jar
    syncBodyFrom = project.file("README.md").text
    dependencies {
        optional.project "LNytGWDc"
        optional.project "t5W7Jfwy"
    }
}

tasks.modrinth.dependsOn(tasks.modrinthSyncBody)